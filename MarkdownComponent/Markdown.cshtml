@using Markdig;
@using Markdig.Extensions;
@using System.Web;
@using System.Net.Http;
@inject HttpClient Http

@if (Content == null)
{
    <span>Loading...</span>
}
else
{
    <div id="@uniqueId">
        <RawHtml HtmlContent="@RenderHtmlContent(Content)"></RawHtml>
    </div>
}


@functions {

    private string uniqueId = Guid.NewGuid().ToString();

    private string content;
    private bool isComponentInitialized = false;

    public string Content
    {
        get { return content; }
        set
        {
            content = value;
            if (isComponentInitialized)
                HtmlRendererInterop.ReplaceInnerHtml(uniqueId, RenderHtmlContent(value));
        }
    }
    public string FromUrl { get; set; }
    public Action<string> ContentChanged { get; set; }

    protected override async Task OnInitAsync()
    {
        if (Content == null)
            Content = String.IsNullOrEmpty(FromUrl) ?
                "Content or FromUrl property is not set or invalid" : await InitContentFromUrl();
        isComponentInitialized = true;
        ContentChanged(Content);
    }

    private async Task<string> InitContentFromUrl()
    {
        HttpResponseMessage httpResponse = await Http.GetAsync(FromUrl);
        return httpResponse.IsSuccessStatusCode ?
        await httpResponse.Content.ReadAsStringAsync() : httpResponse.ReasonPhrase;
    }

    private string RenderHtmlContent(string value) => Markdig.Markdown.ToHtml(
    markdown: value,
    pipeline: new MarkdownPipelineBuilder().UseAdvancedExtensions().Build()
    );

}
