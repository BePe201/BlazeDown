@using Markdig;
@using Markdig.Extensions;
@using System.Web;
@using System.Net.Http;
@inject HttpClient Http

@if (Content == null)
{
    <span>Loading...</span>
}
else
{
    <div id="markdown-component">
        <img src="" onerror="(function (e) { e.parentElement.innerHTML = '@HttpUtility.JavaScriptStringEncode(RenderHtmlContent(content))'; })(this)" />
    </div>
}


@functions {

    private string content;
    private bool isComponentInitialized = false;
    public string Content
    {
        get { return content; }
        set
        {
            content = value;
            if(isComponentInitialized)
                // Once this issue is fixed https://github.com/aspnet/Blazor/issues/167
                // then the interop will no longer be needed. This will also take care of that lame <img hack in the markup above.
                // Once raw HTML output is available, the component will simply use RenderHtmlContent function directly from Razor.
                HtmlRendererInterop.RenderMarkdownAsHtml(RenderHtmlContent(value));
        }
    }
    public string FromUrl { get; set; }
    public Action<string> ContentChanged { get; set; }

    protected override async Task OnInitAsync()
    {
        if (Content == null)
            Content = String.IsNullOrEmpty(FromUrl) ?
                "Content or FromUrl property is not set or invalid" : await InitContentFromUrl();
        isComponentInitialized = true; // Checking for the component to be initialized before attempting to run the interop. Remove after issue #167 is resolved.
        ContentChanged(Content);
    }

    private async Task<string> InitContentFromUrl()
    {
        HttpResponseMessage httpResponse = await Http.GetAsync(FromUrl);
        return httpResponse.IsSuccessStatusCode ?
        await httpResponse.Content.ReadAsStringAsync() : httpResponse.ReasonPhrase;
    }

    private string RenderHtmlContent(string value) => Markdig.Markdown.ToHtml(
    markdown: value,
    pipeline: new MarkdownPipelineBuilder().UseAdvancedExtensions().Build()
    );

}
